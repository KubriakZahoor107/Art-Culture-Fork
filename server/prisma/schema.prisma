// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MUSEUM
  CREATOR
  EDITOR
  AUTHOR
  EXHIBITION
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProductStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  password           String
  userRole           Role                @default(USER) @map("role")
  images             String?             @db.VarChar(255)
  title              String?             @db.VarChar(255)
  bio                String?             @db.Text
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  country            String?             @db.VarChar(100)
  houseNumber        String?             @map("house_number") @db.VarChar(50)
  lat                Float?              @db.Float
  lon                Float?              @db.Float
  postcode           String?             @db.VarChar(20)
  state              String?             @db.VarChar(100)
  street             String?             @db.VarChar(255)
  city               String?             @db.VarChar(100)
  artTerms           ArtTerm[]
  createdExhibitions Exhibition[]        @relation("UserCreatedExhibitions")
  exhibitionArtists  ExhibitionArtist[]
  posts              Post[]
  products           Product[]
  museumLogoImage    museum_logo_images? @relation("UserMuseumLogo")
  museumExhibition   Exhibition[]        @relation("MuseumExhibition")
  museumProducts     Product[]           @relation("MuseumProducts")
  likesReceived      Like[]              @relation("LikesReceived")
  likesGiven         Like[]              @relation("LikesGiven")

  @@map("user")
}

model Post {
  id           Int        @id @default(autoincrement())
  titleEn      String     @map("title_en") @db.VarChar(250)
  titleUk      String     @map("title_uk") @db.VarChar(250)
  contentEn    String     @map("content_en") @db.VarChar(5000)
  contentUk    String     @map("content_uk") @db.VarChar(5000)
  authorId     Int        @map("author_id")
  creatorId    Int?       @map("creator_id")
  museumId     Int?       @map("museum_id")
  exhibitionId Int?       @map("exhibition_id")
  images       String?    @db.VarChar(255)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  author       User       @relation(fields: [authorId], references: [id])
  likes        Like[]
  status       PostStatus @default(PENDING)

  @@index([authorId], map: "Post_author_id_fkey")
}

model Product {
  id             Int                 @id @default(autoincrement())
  titleEn        String              @map("title_en") @db.VarChar(100)
  titleUk        String              @map("title_uk") @db.VarChar(100)
  descriptionEn  String              @map("description_en") @db.VarChar(1000)
  descriptionUk  String              @map("description_uk") @db.VarChar(1000)
  specsEn        String?             @map("specs_en") @db.VarChar(500)
  specsUk        String?             @map("specs_uk") @db.VarChar(500)
  size           String?             @db.VarChar(100)
  styleEn        String?             @map("style_en") @db.VarChar(100)
  styleUk        String?             @map("style_uk") @db.VarChar(100)
  techniqueEn    String?             @map("technique_en") @db.VarChar(100)
  techniqueUk    String?             @map("technique_uk") @db.VarChar(100)
  dateofcreation String?             @db.VarChar(100)
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt @map("updated_at")
  authorId       Int
  museumId       Int?
  artTerms       ArtTerm[]
  author         User                @relation(fields: [authorId], references: [id])
  museum         User?               @relation("MuseumProducts", fields: [museumId], references: [id])
  images         ProductImage[]      @relation("ProductImages")
  exhibitions    ExhibitionProduct[]
  likes          Like[]
  status         ProductStatus       @default(PENDING)

  @@index([museumId], map: "Product_museumId_fkey")
  @@index([authorId], map: "Product_authorId_fkey")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  imageUrl  String  @db.VarChar(255)
  productId Int
  product   Product @relation("ProductImages", fields: [productId], references: [id])

  @@index([productId], map: "ProductImage_productId_fkey")
}

model Exhibition {
  id             Int      @id @default(autoincrement())
  startDate      DateTime @map("start_date")
  endDate        DateTime @map("end_date")
  time           String?  @map("time") @db.VarChar(200)
  createdById    Int      @map("created_by_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  descriptionEn  String?  @map("description_en") @db.VarChar(500)
  descriptionUk  String?  @map("description_uk") @db.VarChar(500)
  locationEn     String?  @map("location_en") @db.VarChar(500)
  locationUk     String?  @map("location_uk") @db.VarChar(500)
  titleEn        String?  @map("title_en") @db.VarChar(150)
  titleUk        String?  @map("title_uk") @db.VarChar(150)
  address        String?  @db.VarChar(255)
  role           String?  @db.VarChar(100)
  email          String?  @db.VarChar(255)
  title          String?  @db.VarChar(255)
  bio            String?  @db.Text
  latitude       Float?   @db.Float
  longitude      Float?   @db.Float
  endTime        String?  @map("end_time") @db.VarChar(200)
  createdBy      User     @relation("UserCreatedExhibitions", fields: [createdById], references: [id])
  exhibitionArtists ExhibitionArtist[]
  images         ExhibitionImage[] @relation("ExhibitionsImages")
  museumId       Int?
  museum         User?    @relation("MuseumExhibition", fields: [museumId], references: [id])
  products       ExhibitionProduct[]
  likes          Like[]

  @@index([createdById], map: "Exhibition_createdById_fkey")
  @@index([museumId], map: "Exhibition_museumId_fkey")
}

model ExhibitionProduct {
  exhibition   Exhibition @relation(fields: [exhibitionId], references: [id])
  product      Product    @relation(fields: [productId], references: [id])
  exhibitionId Int
  productId    Int

  @@id([exhibitionId, productId])
  @@index([productId], map: "ExhibitionProduct_productId_fkey")
}

model ExhibitionImage {
  id           Int        @id @default(autoincrement())
  imageUrl     String     @db.VarChar(255)
  exhibitionId Int
  exhibition   Exhibition @relation("ExhibitionsImages", fields: [exhibitionId], references: [id], onDelete: Cascade)

  @@index([exhibitionId], map: "ExhibitionImage_exhibitionId_fkey")
}

model ExhibitionArtist {
  exhibitionId Int
  artistId     Int
  artist       User       @relation(fields: [artistId], references: [id])
  exhibition   Exhibition @relation(fields: [exhibitionId], references: [id])

  @@id([exhibitionId, artistId])
  @@index([artistId], map: "ExhibitionArtist_artistId_fkey")
}

model ArtTerm {
  id                   Int      @id @default(autoincrement())
  titleEn             String   @map("title_en") @db.VarChar(100)
  titleUk             String   @map("title_uk") @db.VarChar(100)
  descriptionEn       String   @map("description_en") @db.VarChar(350)
  descriptionUk       String   @map("description_uk") @db.VarChar(350)
  contentEn           String   @map("content_en") @db.Text
  contentUk           String   @map("content_uk") @db.Text
  authorId             Int      @map("author_id")
  highlightedProductId Int      @map("highlighted_product_id")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  author               User     @relation(fields: [authorId], references: [id])
  highlightedProduct   Product  @relation(fields: [highlightedProductId], references: [id])

  @@index([authorId], map: "ArtTerm_author_id_fkey")
  @@index([highlightedProductId], map: "ArtTerm_highlighted_product_id_fkey")
}

model museum_logo_images {
  id       Int    @id @default(autoincrement())
  imageUrl String @db.VarChar(255)
  userId   Int    @unique
  user     User   @relation("UserMuseumLogo", fields: [userId], references: [id])

  @@index([userId], map: "Museum_logo_images_userId_fkey")
}

model Like {
  id           Int      @id @default(autoincrement())
  userId       Int
  postId       Int?
  productId    Int?
  exhibitionId Int?
  likedUserId  Int?
  createdAt    DateTime @default(now()) @map("created_at")

  user       User        @relation("LikesGiven", fields: [userId], references: [id])
  post       Post?       @relation(fields: [postId], references: [id])
  product    Product?    @relation(fields: [productId], references: [id])
  exhibition Exhibition? @relation(fields: [exhibitionId], references: [id])
  likedUser  User?       @relation("LikesReceived", fields: [likedUserId], references: [id])

  @@index([userId])
  @@index([postId])
  @@index([productId])
  @@index([exhibitionId])
  @@index([likedUserId])
}

